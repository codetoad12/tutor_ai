# Generated by Django 5.2 on 2025-04-28 19:11

import base.fields
import django.db.models.deletion
import prediction_engine.choices
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField()),
                ('exam_type', base.fields.ChoicesField(choices=[('UPSC_PRELIMS', 'UPSC_PRELIMS'), ('UPSC_MAINS', 'UPSC_MAINS'), ('STATE_PSC', 'STATE_PSC'), ('OTHER', 'OTHER')], enum_class=prediction_engine.choices.ExamType, max_length=12)),
                ('question_text', models.TextField()),
                ('category', base.fields.ChoicesField(choices=[('POLITY', 'POLITY'), ('ECONOMY', 'ECONOMY'), ('HISTORY', 'HISTORY'), ('GEOGRAPHY', 'GEOGRAPHY'), ('SCIENCE', 'SCIENCE'), ('ENVIRONMENT', 'ENVIRONMENT'), ('INTERNATIONAL', 'INTERNATIONAL'), ('SOCIAL_ISSUES', 'SOCIAL_ISSUES'), ('GOVERNANCE', 'GOVERNANCE'), ('SECURITY', 'SECURITY'), ('DISASTER', 'DISASTER'), ('ETHICS', 'ETHICS'), ('OTHER', 'OTHER')], enum_class=prediction_engine.choices.Category, max_length=13)),
                ('is_current_affairs', models.BooleanField(default=False)),
                ('source_event', base.fields.ChoicesField(blank=True, choices=[('GOVERNMENT_POLICY', 'GOVERNMENT_POLICY'), ('INTERNATIONAL_EVENT', 'INTERNATIONAL_EVENT'), ('ECONOMIC_DEVELOPMENT', 'ECONOMIC_DEVELOPMENT'), ('SCIENTIFIC_DISCOVERY', 'SCIENTIFIC_DISCOVERY'), ('ENVIRONMENTAL_ISSUE', 'ENVIRONMENTAL_ISSUE'), ('SOCIAL_MOVEMENT', 'SOCIAL_MOVEMENT'), ('JUDICIAL_DECISION', 'JUDICIAL_DECISION'), ('LEGISLATIVE_CHANGE', 'LEGISLATIVE_CHANGE'), ('OTHER', 'OTHER')], enum_class=prediction_engine.choices.SourceEvent, max_length=20, null=True)),
            ],
            options={
                'ordering': ['-year'],
                'indexes': [models.Index(fields=['year'], name='prediction__year_8c15e9_idx'), models.Index(fields=['exam_type'], name='prediction__exam_ty_d5eb92_idx'), models.Index(fields=['category'], name='prediction__categor_0ab6db_idx')],
            },
        ),
        migrations.CreateModel(
            name='NewsItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('summary', models.TextField()),
                ('category', base.fields.ChoicesField(choices=[('POLITY', 'POLITY'), ('ECONOMY', 'ECONOMY'), ('HISTORY', 'HISTORY'), ('GEOGRAPHY', 'GEOGRAPHY'), ('SCIENCE', 'SCIENCE'), ('ENVIRONMENT', 'ENVIRONMENT'), ('INTERNATIONAL', 'INTERNATIONAL'), ('SOCIAL_ISSUES', 'SOCIAL_ISSUES'), ('GOVERNANCE', 'GOVERNANCE'), ('SECURITY', 'SECURITY'), ('DISASTER', 'DISASTER'), ('ETHICS', 'ETHICS'), ('OTHER', 'OTHER')], enum_class=prediction_engine.choices.Category, max_length=13)),
                ('published_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-published_date'],
                'indexes': [models.Index(fields=['category'], name='prediction__categor_610477_idx'), models.Index(fields=['published_date'], name='prediction__publish_f339ff_idx')],
            },
        ),
        migrations.CreateModel(
            name='PredictionScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField()),
                ('reasoning', models.TextField()),
                ('news_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prediction_scores', to='prediction_engine.newsitem')),
            ],
            options={
                'ordering': ['-score'],
                'indexes': [models.Index(fields=['score'], name='prediction__score_17bceb_idx')],
            },
        ),
    ]
